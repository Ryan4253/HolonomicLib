<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ExpandedXDriveModel_8cpp" kind="file" language="C++">
    <compoundname>ExpandedXDriveModel.cpp</compoundname>
    <includes refid="ExpandedXDriveModel_8hpp" local="yes">ExpandedXDriveModel.hpp</includes>
    <incdepgraph>
      <node id="5">
        <label>okapi/api/util/mathUtil.hpp</label>
      </node>
      <node id="4">
        <label>okapi/api/units/QAngle.hpp</label>
      </node>
      <node id="1">
        <label>src/HolonomicLib/ExpandedXDriveModel.cpp</label>
        <link refid="ExpandedXDriveModel_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>okapi/api/chassis/model/xDriveModel.hpp</label>
      </node>
      <node id="2">
        <label>ExpandedXDriveModel.hpp</label>
        <link refid="ExpandedXDriveModel_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceHolonomicLib">HolonomicLib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ExpandedXDriveModel_8hpp" kindref="compound">ExpandedXDriveModel.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceHolonomicLib" kindref="compound">HolonomicLib</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1ExpandedXDriveModel_1ab6b7dce7bfc491336de1631944a662ea" kindref="member">ExpandedXDriveModel::cartesian</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xSpeed,<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ySpeed,<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zRotation,<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>okapi::QAngle<sp/>angle,<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold)<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>ySpeed<sp/>=<sp/>-okapi::deadband(std::clamp(ySpeed,<sp/>-1.0,<sp/>1.0),<sp/>-std::abs(threshold),<sp/>std::abs(threshold));</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>xSpeed<sp/>=<sp/>okapi::deadband(std::clamp(xSpeed,<sp/>-1.0,<sp/>1.0),<sp/>-std::abs(threshold),<sp/>std::abs(threshold));</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>zRotation<sp/>=<sp/>okapi::deadband(std::clamp(zRotation,<sp/>-1.0,<sp/>1.0),<sp/>-std::abs(threshold),<sp/>std::abs(threshold));</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fwd<sp/>=<sp/>xSpeed<sp/>*<sp/>std::cos(angle.convert(okapi::radian))<sp/>-<sp/>ySpeed<sp/>*<sp/>std::sin(angle.convert(okapi::radian));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>xSpeed<sp/>*<sp/>std::sin(angle.convert(okapi::radian))<sp/>+<sp/>ySpeed<sp/>*<sp/>std::cos(angle.convert(okapi::radian));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frontLeft<sp/>=<sp/>fwd<sp/>-<sp/>right<sp/>+<sp/>zRotation;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frontRight<sp/>=<sp/>fwd<sp/>+<sp/>right<sp/>-<sp/>zRotation;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>backLeft<sp/>=<sp/>fwd<sp/>+<sp/>right<sp/>+<sp/>zRotation;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>backRight<sp/>=<sp/>fwd<sp/>-<sp/>right<sp/>-<sp/>zRotation;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>std::max(std::max(std::abs(frontLeft),<sp/>std::abs(frontRight)),<sp/>std::max(std::abs(backLeft),<sp/>std::abs(backRight)));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max<sp/>&gt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frontLeft<sp/>/=<sp/>max;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frontRight<sp/>/=<sp/>max;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backLeft<sp/>/=<sp/>max;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backRight<sp/>/=<sp/>max;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>topLeftMotor-&gt;moveVoltage(frontLeft<sp/>*<sp/>12000);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>topRightMotor-&gt;moveVoltage(frontRight<sp/>*<sp/>12000);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>bottomLeftMotor-&gt;moveVoltage(backLeft<sp/>*<sp/>12000);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>bottomRightMotor-&gt;moveVoltage(backRight<sp/>*<sp/>12000);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1ExpandedXDriveModel_1ad283446428ec63ca9afdbd05b9e44d41" kindref="member">ExpandedXDriveModel::polar</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>magnitude,<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>okapi::QAngle<sp/>direction,<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zRotation,<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>okapi::QAngle<sp/>angle,<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold)<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>magnitude<sp/>=<sp/>okapi::deadband(std::clamp(magnitude,<sp/>-1.0,<sp/>1.0),<sp/>-std::abs(threshold),<sp/>std::abs(threshold));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>zRotation<sp/>=<sp/>okapi::deadband(std::clamp(zRotation,<sp/>-1.0,<sp/>1.0),<sp/>-std::abs(threshold),<sp/>std::abs(threshold));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fwd<sp/>=<sp/>magnitude<sp/>*<sp/>std::sin(direction.convert(okapi::radian));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>magnitude<sp/>*<sp/>std::cos(direction.convert(okapi::radian));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHolonomicLib_1_1ExpandedXDriveModel_1ab6b7dce7bfc491336de1631944a662ea" kindref="member">cartesian</ref>(fwd,<sp/>right,<sp/>zRotation,<sp/>angle,<sp/>threshold);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/HolonomicLib/ExpandedXDriveModel.cpp"/>
  </compounddef>
</doxygen>
