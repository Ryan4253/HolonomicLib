<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="Rotation_8cpp" kind="file" language="C++">
    <compoundname>Rotation.cpp</compoundname>
    <includes refid="Rotation_8hpp" local="yes">Rotation.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>okapi/api/units/QAngle.hpp</label>
      </node>
      <node id="4">
        <label>okapi/api/units/QLength.hpp</label>
      </node>
      <node id="2">
        <label>Rotation.hpp</label>
        <link refid="Rotation_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/HolonomicLib/Pathing/Geometry/Rotation.cpp</label>
        <link refid="Rotation_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceHolonomicLib">HolonomicLib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Rotation_8hpp" kindref="compound">Rotation.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceHolonomicLib" kindref="compound">HolonomicLib</ref>{</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"><ref refid="classHolonomicLib_1_1Rotation_1adc2f58e1d6942b5c3526c868fc35d605" kindref="member">Rotation::Rotation</ref>(okapi::QAngle<sp/>itheta){</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>itheta;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>sine<sp/>=<sp/>(sin(itheta)).convert(okapi::number);</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>cosine<sp/>=<sp/>(cos(itheta)).convert(okapi::number);</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><ref refid="classHolonomicLib_1_1Rotation_1adc2f58e1d6942b5c3526c868fc35d605" kindref="member">Rotation::Rotation</ref>(okapi::QLength<sp/>ix,<sp/>okapi::QLength<sp/>iy){</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>magnitude<sp/>=<sp/>hypot(ix,<sp/>iy);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(magnitude<sp/>&gt;<sp/>1e-6<sp/>*<sp/>okapi::meter)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sine<sp/>=<sp/>(iy<sp/>/<sp/>magnitude).convert(okapi::number);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cosine<sp/>=<sp/>(ix<sp/>/<sp/>magnitude).convert(okapi::number);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sine<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cosine<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>std::atan2(sine,<sp/>cosine)<sp/>*<sp/>okapi::radian;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="classHolonomicLib_1_1Rotation_1adc2f58e1d6942b5c3526c868fc35d605" kindref="member">Rotation::Rotation</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ix,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>iy){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHolonomicLib_1_1Rotation_1adc2f58e1d6942b5c3526c868fc35d605" kindref="member">Rotation</ref>(ix<sp/>*<sp/>okapi::meter,<sp/>iy<sp/>*<sp/>okapi::meter);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">okapi::QAngle<sp/><ref refid="classHolonomicLib_1_1Rotation_1ad894d0677ea1801da39f284ba1890788" kindref="member">Rotation::Theta</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theta;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1Rotation_1a530e967106c0fc4699e0b70ce745a20b" kindref="member">Rotation::Sin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sine;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1Rotation_1a4f8aa55c77cbfea1a382658e4c6df271" kindref="member">Rotation::Cos</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cosine;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1Rotation_1a6c0334b8e618d20444e88369efff921d" kindref="member">Rotation::Tan</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sine<sp/>/<sp/>cosine;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">Rotation<sp/><ref refid="classHolonomicLib_1_1Rotation_1a410b3b4b8d5b2f74f8ba154977ac9e92" kindref="member">Rotation::operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1Rotation_1a51c6f439867abc1f5a4d52c1c6052bee" kindref="member">rotateBy</ref>(rhs);<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">Rotation<sp/><ref refid="classHolonomicLib_1_1Rotation_1a5c6e5be80cb0bcc08676c794af79f8c4" kindref="member">Rotation::operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+<sp/>-rhs;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">Rotation<sp/><ref refid="classHolonomicLib_1_1Rotation_1a5c6e5be80cb0bcc08676c794af79f8c4" kindref="member">Rotation::operator-</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1Rotation_1adc2f58e1d6942b5c3526c868fc35d605" kindref="member">Rotation</ref>(theta<sp/>*<sp/>-1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">Rotation<sp/><ref refid="classHolonomicLib_1_1Rotation_1a18d7a63554411a7814ab63a0e7ef8554" kindref="member">Rotation::operator*</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalar)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1Rotation_1adc2f58e1d6942b5c3526c868fc35d605" kindref="member">Rotation</ref>(theta<sp/>*<sp/>scalar);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">Rotation<sp/><ref refid="classHolonomicLib_1_1Rotation_1a113a0e45ccbc84a0a3b91a0d2e6f6edd" kindref="member">Rotation::operator/</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalar)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1Rotation_1adc2f58e1d6942b5c3526c868fc35d605" kindref="member">Rotation</ref>(theta<sp/>/<sp/>scalar);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1Rotation_1aedf3822347b8c71599c8b6e4ba38aef7" kindref="member">Rotation::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::hypot(cosine<sp/>-<sp/>rhs.cosine,<sp/>sine<sp/>-<sp/>rhs.sine)<sp/>&lt;<sp/>1E-9;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1Rotation_1afa4babea6c9b2e6021a3996508b9176b" kindref="member">Rotation::operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(<ref refid="classHolonomicLib_1_1Rotation_1aedf3822347b8c71599c8b6e4ba38aef7" kindref="member">operator==</ref>(rhs));</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classHolonomicLib_1_1Rotation_1a489518d1cd09b1631700977e42269417" kindref="member">Rotation::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation<sp/>&amp;rhs){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>rhs.theta;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>sine<sp/>=<sp/>rhs.sine;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>cosine<sp/>=<sp/>rhs.cosine;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">Rotation<sp/><ref refid="classHolonomicLib_1_1Rotation_1a51c6f439867abc1f5a4d52c1c6052bee" kindref="member">Rotation::rotateBy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{(cosine<sp/>*<sp/>rhs.cosine<sp/>-<sp/>sine<sp/>*<sp/>rhs.sine)<sp/>*<sp/>okapi::meter,<sp/>(cosine<sp/>*<sp/>rhs.sine<sp/>+<sp/>sine<sp/>*<sp/>rhs.cosine)<sp/>*<sp/>okapi::meter};</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/HolonomicLib/Pathing/Geometry/Rotation.cpp"/>
  </compounddef>
</doxygen>
